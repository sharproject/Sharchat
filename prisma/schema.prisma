// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String
  password  String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  guilds    Guild[]
  Message   Message[]
  Member    Member[]
}

model Guild {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String
  description    String
  owner          User      @relation(fields: [ownerID], references: [id], onDelete: Cascade)
  members        Member[]
  channels       Channel[]
  roles          Role[]
  everyoneRoleId String
  ownerID        String
}

model Member {
  id        String    @id @default(uuid())
  joinedAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // guild Guild[]
  // Role 
  isOwner   Boolean   @default(false)
  removed   Boolean   @default(false)
  Guild     Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId   String
  Message   Message[]
  Role      Role[]
  userId    String

  // @@id([userId, guildId])
}

model Channel {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  name        String
  description String    @default("")
  guild       Guild[]
  message     Message[]
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  userId    String
  channelId String
  memberId  String
}

model Role {
  RoleName    String
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  guild       Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  hide        Boolean  @default(false)
  position    Int      @default(1)
  member      Member[]
  color       String   @default("#fffff")
  hideInNav   Boolean  @default(false)
  permissions String

  guildId String
}
